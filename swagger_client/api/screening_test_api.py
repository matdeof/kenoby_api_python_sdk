# coding: utf-8

"""
    Kenoby

    Issues or Questions? <a href=\"mailto:devs@kenoby.com\" target=\"_blank\">Send us an e-mail</a>.<br>                      For better experience <a href=\"http://api.kenoby.com/swagger.json\" target=\"_blank\">Download our swagger.json</a>                      and use it on <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScreeningTestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def getoriginaltestsforstage(self, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Returns the original tests for a specific stage  # noqa: E501

        Returns the original tests for a specific stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getoriginaltestsforstage(x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getoriginaltestsforstage_with_http_info(x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.getoriginaltestsforstage_with_http_info(x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
            return data

    def getoriginaltestsforstage_with_http_info(self, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Returns the original tests for a specific stage  # noqa: E501

        Returns the original tests for a specific stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getoriginaltestsforstage_with_http_info(x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'mappings_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getoriginaltestsforstage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getoriginaltestsforstage`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getoriginaltestsforstage`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `getoriginaltestsforstage`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `getoriginaltestsforstage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/original-tests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getscreeningtestposition(self, positions_id, application_id, **kwargs):  # noqa: E501
        """Returns possible screening test for a specific position and application  # noqa: E501

        Returns possible screening questions for a specific position and application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getscreeningtestposition(positions_id, application_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :param str application_id: The ID of the positions that the token will be generated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getscreeningtestposition_with_http_info(positions_id, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getscreeningtestposition_with_http_info(positions_id, application_id, **kwargs)  # noqa: E501
            return data

    def getscreeningtestposition_with_http_info(self, positions_id, application_id, **kwargs):  # noqa: E501
        """Returns possible screening test for a specific position and application  # noqa: E501

        Returns possible screening questions for a specific position and application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getscreeningtestposition_with_http_info(positions_id, application_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :param str application_id: The ID of the positions that the token will be generated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['positions_id', 'application_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getscreeningtestposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `getscreeningtestposition`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `getscreeningtestposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listmindsightfunctions(self, x_tenant, x_version, **kwargs):  # noqa: E501
        """Get Mindsight functions from Mindsight API  # noqa: E501

        Get Mindsight functions from Mindsight API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.listmindsightfunctions(x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.listmindsightfunctions_with_http_info(x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.listmindsightfunctions_with_http_info(x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def listmindsightfunctions_with_http_info(self, x_tenant, x_version, **kwargs):  # noqa: E501
        """Get Mindsight functions from Mindsight API  # noqa: E501

        Get Mindsight functions from Mindsight API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.listmindsightfunctions_with_http_info(x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listmindsightfunctions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `listmindsightfunctions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `listmindsightfunctions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/list-mindsight-tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rankdonetest(self, x_tenant, x_version, test_id, **kwargs):  # noqa: E501
        """Get Rankdone test from Rankdone API  # noqa: E501

        Get Rankdone test from Rankdone API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rankdonetest(x_tenant, x_version, test_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str test_id: testId of Rankdone test API (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rankdonetest_with_http_info(x_tenant, x_version, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rankdonetest_with_http_info(x_tenant, x_version, test_id, **kwargs)  # noqa: E501
            return data

    def rankdonetest_with_http_info(self, x_tenant, x_version, test_id, **kwargs):  # noqa: E501
        """Get Rankdone test from Rankdone API  # noqa: E501

        Get Rankdone test from Rankdone API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rankdonetest_with_http_info(x_tenant, x_version, test_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str test_id: testId of Rankdone test API (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'test_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rankdonetest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `rankdonetest`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `rankdonetest`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `rankdonetest`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_id' in params:
            query_params.append(('testId', params['test_id']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/rankdone-test', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rankdonetest_0(self, x_tenant, x_version, mapping_id, stage_id, original_test, **kwargs):  # noqa: E501
        """Check Rankdone test from Rankdone API  # noqa: E501

        Check Rankdone test from Rankdone API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rankdonetest_0(x_tenant, x_version, mapping_id, stage_id, original_test, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mapping_id: mappingId (required)
        :param str stage_id: stage of the test (required)
        :param str original_test: originalTest id of the test (in position) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rankdonetest_0_with_http_info(x_tenant, x_version, mapping_id, stage_id, original_test, **kwargs)  # noqa: E501
        else:
            (data) = self.rankdonetest_0_with_http_info(x_tenant, x_version, mapping_id, stage_id, original_test, **kwargs)  # noqa: E501
            return data

    def rankdonetest_0_with_http_info(self, x_tenant, x_version, mapping_id, stage_id, original_test, **kwargs):  # noqa: E501
        """Check Rankdone test from Rankdone API  # noqa: E501

        Check Rankdone test from Rankdone API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rankdonetest_0_with_http_info(x_tenant, x_version, mapping_id, stage_id, original_test, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mapping_id: mappingId (required)
        :param str stage_id: stage of the test (required)
        :param str original_test: originalTest id of the test (in position) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'mapping_id', 'stage_id', 'original_test']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rankdonetest_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `rankdonetest_0`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `rankdonetest_0`")  # noqa: E501
        # verify the required parameter 'mapping_id' is set
        if ('mapping_id' not in params or
                params['mapping_id'] is None):
            raise ValueError("Missing the required parameter `mapping_id` when calling `rankdonetest_0`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `rankdonetest_0`")  # noqa: E501
        # verify the required parameter 'original_test' is set
        if ('original_test' not in params or
                params['original_test'] is None):
            raise ValueError("Missing the required parameter `original_test` when calling `rankdonetest_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mapping_id' in params:
            query_params.append(('mappingId', params['mapping_id']))  # noqa: E501
        if 'stage_id' in params:
            query_params.append(('stageId', params['stage_id']))  # noqa: E501
        if 'original_test' in params:
            query_params.append(('originalTest', params['original_test']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/check-rankdone-test', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rankdonetests(self, x_tenant, x_version, page, **kwargs):  # noqa: E501
        """Get Rankdone tests from Rankdone API  # noqa: E501

        Get Rankdone tests from Rankdone API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rankdonetests(x_tenant, x_version, page, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param int page: page of results (10 per page) (required)
        :param str search: text for searching
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rankdonetests_with_http_info(x_tenant, x_version, page, **kwargs)  # noqa: E501
        else:
            (data) = self.rankdonetests_with_http_info(x_tenant, x_version, page, **kwargs)  # noqa: E501
            return data

    def rankdonetests_with_http_info(self, x_tenant, x_version, page, **kwargs):  # noqa: E501
        """Get Rankdone tests from Rankdone API  # noqa: E501

        Get Rankdone tests from Rankdone API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rankdonetests_with_http_info(x_tenant, x_version, page, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param int page: page of results (10 per page) (required)
        :param str search: text for searching
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'page', 'search']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rankdonetests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `rankdonetests`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `rankdonetests`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `rankdonetests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/list-rankdone-tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testprocessaudio(self, x_tenant, x_version, uri, **kwargs):  # noqa: E501
        """Upload audio using Google API  # noqa: E501

        Upload audio using Google API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.testprocessaudio(x_tenant, x_version, uri, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str uri: Google Cloud audio file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.testprocessaudio_with_http_info(x_tenant, x_version, uri, **kwargs)  # noqa: E501
        else:
            (data) = self.testprocessaudio_with_http_info(x_tenant, x_version, uri, **kwargs)  # noqa: E501
            return data

    def testprocessaudio_with_http_info(self, x_tenant, x_version, uri, **kwargs):  # noqa: E501
        """Upload audio using Google API  # noqa: E501

        Upload audio using Google API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.testprocessaudio_with_http_info(x_tenant, x_version, uri, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str uri: Google Cloud audio file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'uri']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testprocessaudio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `testprocessaudio`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `testprocessaudio`")  # noqa: E501
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `testprocessaudio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/upload-audio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validatetesttokenscreeningtest(self, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Validate token and return if applicant already filled screeningTest.  # noqa: E501

        Validate token and return if applicant already filled screeningTest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validatetesttokenscreeningtest(x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.validatetesttokenscreeningtest_with_http_info(x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.validatetesttokenscreeningtest_with_http_info(x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
            return data

    def validatetesttokenscreeningtest_with_http_info(self, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Validate token and return if applicant already filled screeningTest.  # noqa: E501

        Validate token and return if applicant already filled screeningTest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validatetesttokenscreeningtest_with_http_info(x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'mappings_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validatetesttokenscreeningtest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `validatetesttokenscreeningtest`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `validatetesttokenscreeningtest`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `validatetesttokenscreeningtest`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `validatetesttokenscreeningtest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/screening-test-valid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
