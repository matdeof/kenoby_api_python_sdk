# coding: utf-8

"""
    Kenoby

    Issues or Questions? <a href=\"mailto:devs@kenoby.com\" target=\"_blank\">Send us an e-mail</a>.<br>                      For better experience <a href=\"http://api.kenoby.com/swagger.json\" target=\"_blank\">Download our swagger.json</a>                      and use it on <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PositionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancelpositions(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Cancel a specific position instance.  # noqa: E501

        Cancel a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancelpositions(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancelpositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancelpositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def cancelpositions_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Cancel a specific position instance.  # noqa: E501

        Cancel a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancelpositions_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancelpositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `cancelpositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `cancelpositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `cancelpositions`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `cancelpositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checkpositionstage(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Check if stage in a position has candidates.  # noqa: E501

        Check if stage in a position has candidates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checkpositionstage(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be deleted. (required)
        :param Positions body: Data used to check the stage in position
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checkpositionstage_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.checkpositionstage_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def checkpositionstage_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Check if stage in a position has candidates.  # noqa: E501

        Check if stage in a position has candidates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checkpositionstage_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be deleted. (required)
        :param Positions body: Data used to check the stage in position
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkpositionstage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `checkpositionstage`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `checkpositionstage`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `checkpositionstage`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `checkpositionstage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/has-candidates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def closepositions(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Close a specific position instance.  # noqa: E501

        Close a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.closepositions(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.closepositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.closepositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def closepositions_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Close a specific position instance.  # noqa: E501

        Close a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.closepositions_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method closepositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `closepositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `closepositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `closepositions`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `closepositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/close', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createpositions(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new positions  # noqa: E501

        Create a new positions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createpositions(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Positions body: Data used to create a new positions (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.createpositions_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.createpositions_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def createpositions_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new positions  # noqa: E501

        Create a new positions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createpositions_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Positions body: Data used to create a new positions (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createpositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `createpositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `createpositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `createpositions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `createpositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Delete a specific position instance.  # noqa: E501

        Delete a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be deleted. (required)
        :param Positions body: Data used to delete positions
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Delete a specific position instance.  # noqa: E501

        Delete a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be deleted. (required)
        :param Positions body: Data used to delete positions
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `delete`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `delete`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exportcandidatesposition(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Generate CSV that contains candidate information for a specific position  # noqa: E501

        Generate CSV that contains candidate information for a specific position  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.exportcandidatesposition(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.exportcandidatesposition_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exportcandidatesposition_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def exportcandidatesposition_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Generate CSV that contains candidate information for a specific position  # noqa: E501

        Generate CSV that contains candidate information for a specific position  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.exportcandidatesposition_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exportcandidatesposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `exportcandidatesposition`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `exportcandidatesposition`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `exportcandidatesposition`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `exportcandidatesposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/export-candidates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generatetokenposition(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Generate internal token for a Position.  # noqa: E501

        Generates a token to be used in an internal position (not public)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generatetokenposition(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generatetokenposition_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.generatetokenposition_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def generatetokenposition_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Generate internal token for a Position.  # noqa: E501

        Generates a token to be used in an internal position (not public)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generatetokenposition_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generatetokenposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `generatetokenposition`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `generatetokenposition`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `generatetokenposition`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `generatetokenposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/generate-token-internal', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getpositiongeolocationapplicants(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Returns the status of geo located applicants for the position.  # noqa: E501

        Returns the status of geo located applicants for the position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositiongeolocationapplicants(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getpositiongeolocationapplicants_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getpositiongeolocationapplicants_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def getpositiongeolocationapplicants_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Returns the status of geo located applicants for the position.  # noqa: E501

        Returns the status of geo located applicants for the position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositiongeolocationapplicants_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpositiongeolocationapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getpositiongeolocationapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getpositiongeolocationapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getpositiongeolocationapplicants`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `getpositiongeolocationapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/status-geolocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getpositionhasparser(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Returns if parser is available for a specific position  # noqa: E501

        Returns if parser is available for a specific position  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionhasparser(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getpositionhasparser_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getpositionhasparser_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def getpositionhasparser_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Returns if parser is available for a specific position  # noqa: E501

        Returns if parser is available for a specific position  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionhasparser_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpositionhasparser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getpositionhasparser`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getpositionhasparser`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getpositionhasparser`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `getpositionhasparser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/has-parser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getpositionhistory(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Returns the position history for a specific position  # noqa: E501

        Returns the position history for a specific position  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionhistory(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getpositionhistory_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getpositionhistory_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def getpositionhistory_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Returns the position history for a specific position  # noqa: E501

        Returns the position history for a specific position  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionhistory_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that the token will be generated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpositionhistory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getpositionhistory`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getpositionhistory`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getpositionhistory`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `getpositionhistory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getpositions(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Return a specific position instance.  # noqa: E501

        Return a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositions(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be retrieved. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getpositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getpositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def getpositions_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Return a specific position instance.  # noqa: E501

        Return a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositions_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be retrieved. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getpositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getpositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getpositions`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `getpositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getpositionsreferral(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple positions resources for referral.  # noqa: E501

        This operation allows you to list for positions resources for referral.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionsreferral(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: PositionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getpositionsreferral_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.getpositionsreferral_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def getpositionsreferral_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple positions resources for referral.  # noqa: E501

        This operation allows you to list for positions resources for referral.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionsreferral_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: PositionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpositionsreferral" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getpositionsreferral`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getpositionsreferral`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getpositionsreferral`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PositionsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getpositionwebportal(self, x_tenant, authorization, x_portal_token, position_id, **kwargs):  # noqa: E501
        """Return a specific position instance for web portal.  # noqa: E501

        Return a specific position instance web portal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionwebportal(x_tenant, authorization, x_portal_token, position_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str position_id: The ID of the position that will be retrieved. (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getpositionwebportal_with_http_info(x_tenant, authorization, x_portal_token, position_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getpositionwebportal_with_http_info(x_tenant, authorization, x_portal_token, position_id, **kwargs)  # noqa: E501
            return data

    def getpositionwebportal_with_http_info(self, x_tenant, authorization, x_portal_token, position_id, **kwargs):  # noqa: E501
        """Return a specific position instance for web portal.  # noqa: E501

        Return a specific position instance web portal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getpositionwebportal_with_http_info(x_tenant, authorization, x_portal_token, position_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str position_id: The ID of the position that will be retrieved. (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'authorization', 'x_portal_token', 'position_id', 'x_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpositionwebportal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getpositionwebportal`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getpositionwebportal`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `getpositionwebportal`")  # noqa: E501
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params or
                params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `getpositionwebportal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_portal' in params:
            header_params['x-portal'] = params['x_portal']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/portal', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def startpositiongeolocationapplicants(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Starts indexing geo located applicants for the position.  # noqa: E501

        Starts indexing geo located applicants for the position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.startpositiongeolocationapplicants(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.startpositiongeolocationapplicants_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.startpositiongeolocationapplicants_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def startpositiongeolocationapplicants_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Starts indexing geo located applicants for the position.  # noqa: E501

        Starts indexing geo located applicants for the position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.startpositiongeolocationapplicants_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method startpositiongeolocationapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `startpositiongeolocationapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `startpositiongeolocationapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `startpositiongeolocationapplicants`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `startpositiongeolocationapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/start-geolocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def startpositions(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Start/unfreeze a specific position instance.  # noqa: E501

        Start/unfreeze a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.startpositions(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.startpositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.startpositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def startpositions_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Start/unfreeze a specific position instance.  # noqa: E501

        Start/unfreeze a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.startpositions_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method startpositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `startpositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `startpositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `startpositions`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `startpositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stoppositions(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Stop/freeze a specific position instance.  # noqa: E501

        Stop/freeze a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stoppositions(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stoppositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stoppositions_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def stoppositions_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Stop/freeze a specific position instance.  # noqa: E501

        Stop/freeze a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stoppositions_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stoppositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `stoppositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `stoppositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `stoppositions`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `stoppositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/stop', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatepositionfeedback(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Update a email template feedback.  # noqa: E501

        Update a email template feedback.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositionfeedback(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updatepositionfeedback_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.updatepositionfeedback_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def updatepositionfeedback_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Update a email template feedback.  # noqa: E501

        Update a email template feedback.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositionfeedback_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatepositionfeedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updatepositionfeedback`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updatepositionfeedback`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updatepositionfeedback`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `updatepositionfeedback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/update-feedback', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatepositiongeolocation(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Update a specific position geolocation feature.  # noqa: E501

        Update a specific position geolocation feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositiongeolocation(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updatepositiongeolocation_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.updatepositiongeolocation_with_http_info(authorization, x_tenant, x_version, positions_id, **kwargs)  # noqa: E501
            return data

    def updatepositiongeolocation_with_http_info(self, authorization, x_tenant, x_version, positions_id, **kwargs):  # noqa: E501
        """Update a specific position geolocation feature.  # noqa: E501

        Update a specific position geolocation feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositiongeolocation_with_http_info(authorization, x_tenant, x_version, positions_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatepositiongeolocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updatepositiongeolocation`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updatepositiongeolocation`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updatepositiongeolocation`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `updatepositiongeolocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/toggle-geolocation', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatepositions(self, authorization, x_tenant, x_version, positions_id, body, **kwargs):  # noqa: E501
        """Update a specific position instance.  # noqa: E501

        Update a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositions(authorization, x_tenant, x_version, positions_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :param Positions body: Data used to update positions (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updatepositions_with_http_info(authorization, x_tenant, x_version, positions_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updatepositions_with_http_info(authorization, x_tenant, x_version, positions_id, body, **kwargs)  # noqa: E501
            return data

    def updatepositions_with_http_info(self, authorization, x_tenant, x_version, positions_id, body, **kwargs):  # noqa: E501
        """Update a specific position instance.  # noqa: E501

        Update a specific position instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositions_with_http_info(authorization, x_tenant, x_version, positions_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :param Positions body: Data used to update positions (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatepositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updatepositions`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updatepositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updatepositions`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `updatepositions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updatepositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatepositionsaccess(self, authorization, x_tenant, x_version, positions_id, body, **kwargs):  # noqa: E501
        """Update a specific position access instance.  # noqa: E501

        Update a specific position access instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositionsaccess(authorization, x_tenant, x_version, positions_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :param Positions body: Data used to update positions (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updatepositionsaccess_with_http_info(authorization, x_tenant, x_version, positions_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updatepositionsaccess_with_http_info(authorization, x_tenant, x_version, positions_id, body, **kwargs)  # noqa: E501
            return data

    def updatepositionsaccess_with_http_info(self, authorization, x_tenant, x_version, positions_id, body, **kwargs):  # noqa: E501
        """Update a specific position access instance.  # noqa: E501

        Update a specific position access instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatepositionsaccess_with_http_info(authorization, x_tenant, x_version, positions_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str positions_id: The ID of the positions that will be updated. (required)
        :param Positions body: Data used to update positions (required)
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'positions_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatepositionsaccess" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updatepositionsaccess`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updatepositionsaccess`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updatepositionsaccess`")  # noqa: E501
        # verify the required parameter 'positions_id' is set
        if ('positions_id' not in params or
                params['positions_id'] is None):
            raise ValueError("Missing the required parameter `positions_id` when calling `updatepositionsaccess`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updatepositionsaccess`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'positions_id' in params:
            path_params['positionsId'] = params['positions_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionsId}/update-access', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
