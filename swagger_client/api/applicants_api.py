# coding: utf-8

"""
    Kenoby

    Issues or Questions? <a href=\"mailto:devs@kenoby.com\" target=\"_blank\">Send us an e-mail</a>.<br>                      For better experience <a href=\"http://api.kenoby.com/swagger.json\" target=\"_blank\">Download our swagger.json</a>                      and use it on <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApplicantsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activateapplication(self, application, sign_up_token, **kwargs):  # noqa: E501
        """Applicant activating his application for a specific position.  # noqa: E501

        Applicant activating his application for a specific position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.activateapplication(application, sign_up_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application: The ID of the application that will be activated. (required)
        :param str sign_up_token: The token encrypted that gives permission to activate. (required)
        :param str position: The ID of the position that will be updated.
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.activateapplication_with_http_info(application, sign_up_token, **kwargs)  # noqa: E501
        else:
            (data) = self.activateapplication_with_http_info(application, sign_up_token, **kwargs)  # noqa: E501
            return data

    def activateapplication_with_http_info(self, application, sign_up_token, **kwargs):  # noqa: E501
        """Applicant activating his application for a specific position.  # noqa: E501

        Applicant activating his application for a specific position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.activateapplication_with_http_info(application, sign_up_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application: The ID of the application that will be activated. (required)
        :param str sign_up_token: The token encrypted that gives permission to activate. (required)
        :param str position: The ID of the position that will be updated.
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application', 'sign_up_token', 'position']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activateapplication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `activateapplication`")  # noqa: E501
        # verify the required parameter 'sign_up_token' is set
        if ('sign_up_token' not in params or
                params['sign_up_token'] is None):
            raise ValueError("Missing the required parameter `sign_up_token` when calling `activateapplication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'application' in params:
            query_params.append(('application', params['application']))  # noqa: E501
        if 'sign_up_token' in params:
            query_params.append(('signUpToken', params['sign_up_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/job/apply/activate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applypositions(self, x_tenant, x_version, position, captcha_token, body, **kwargs):  # noqa: E501
        """Applicant applying for a specific position.  # noqa: E501

        Applicant applying for a specific position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.applypositions(x_tenant, x_version, position, captcha_token, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position: The ID of the positions that will be updated. (required)
        :param str captcha_token: The captcha token. (required)
        :param Applicants body: Applicant that is applying for this position (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.applypositions_with_http_info(x_tenant, x_version, position, captcha_token, body, **kwargs)  # noqa: E501
        else:
            (data) = self.applypositions_with_http_info(x_tenant, x_version, position, captcha_token, body, **kwargs)  # noqa: E501
            return data

    def applypositions_with_http_info(self, x_tenant, x_version, position, captcha_token, body, **kwargs):  # noqa: E501
        """Applicant applying for a specific position.  # noqa: E501

        Applicant applying for a specific position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.applypositions_with_http_info(x_tenant, x_version, position, captcha_token, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position: The ID of the positions that will be updated. (required)
        :param str captcha_token: The captcha token. (required)
        :param Applicants body: Applicant that is applying for this position (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'position', 'captcha_token', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applypositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `applypositions`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `applypositions`")  # noqa: E501
        # verify the required parameter 'position' is set
        if ('position' not in params or
                params['position'] is None):
            raise ValueError("Missing the required parameter `position` when calling `applypositions`")  # noqa: E501
        # verify the required parameter 'captcha_token' is set
        if ('captcha_token' not in params or
                params['captcha_token'] is None):
            raise ValueError("Missing the required parameter `captcha_token` when calling `applypositions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `applypositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'captcha_token' in params:
            query_params.append(('captchaToken', params['captcha_token']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/job/apply', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cachescreeningtest(self, applicant_id, **kwargs):  # noqa: E501
        """Save and return a specific application screening test which already started the test.  # noqa: E501

        Save and return a specific application screening test which already started the test.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cachescreeningtest(applicant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant_id: The ID of the application that will be retrieved. (required)
        :return: ApplicantsscreeningTests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cachescreeningtest_with_http_info(applicant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cachescreeningtest_with_http_info(applicant_id, **kwargs)  # noqa: E501
            return data

    def cachescreeningtest_with_http_info(self, applicant_id, **kwargs):  # noqa: E501
        """Save and return a specific application screening test which already started the test.  # noqa: E501

        Save and return a specific application screening test which already started the test.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cachescreeningtest_with_http_info(applicant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant_id: The ID of the application that will be retrieved. (required)
        :return: ApplicantsscreeningTests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicant_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cachescreeningtest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicant_id' is set
        if ('applicant_id' not in params or
                params['applicant_id'] is None):
            raise ValueError("Missing the required parameter `applicant_id` when calling `cachescreeningtest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicant_id' in params:
            path_params['applicantId'] = params['applicant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/cache', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsscreeningTests',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checkpreviousapplicant(self, email, tenant, **kwargs):  # noqa: E501
        """Validade if applicant exists for login.  # noqa: E501

        Validade if applicant exists for login.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checkpreviousapplicant(email, tenant, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email of the application that will be checked. (required)
        :param str tenant: The ID of the tenant that will be checked. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checkpreviousapplicant_with_http_info(email, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.checkpreviousapplicant_with_http_info(email, tenant, **kwargs)  # noqa: E501
            return data

    def checkpreviousapplicant_with_http_info(self, email, tenant, **kwargs):  # noqa: E501
        """Validade if applicant exists for login.  # noqa: E501

        Validade if applicant exists for login.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checkpreviousapplicant_with_http_info(email, tenant, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email of the application that will be checked. (required)
        :param str tenant: The ID of the tenant that will be checked. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'tenant']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkpreviousapplicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `checkpreviousapplicant`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in params or
                params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `checkpreviousapplicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501
        if 'tenant' in params:
            path_params['tenant'] = params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/jobs/check-previous', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checkpreviousapplicant_0(self, applicant, tenant, **kwargs):  # noqa: E501
        """Validade if applicant exists and send an email to the applicant for login.  # noqa: E501

        Validade if applicant exists and send an email to the applicant for login.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checkpreviousapplicant_0(applicant, tenant, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant: The ID of the application that will be retrieved. (required)
        :param str tenant: The ID of the tenant that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checkpreviousapplicant_0_with_http_info(applicant, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.checkpreviousapplicant_0_with_http_info(applicant, tenant, **kwargs)  # noqa: E501
            return data

    def checkpreviousapplicant_0_with_http_info(self, applicant, tenant, **kwargs):  # noqa: E501
        """Validade if applicant exists and send an email to the applicant for login.  # noqa: E501

        Validade if applicant exists and send an email to the applicant for login.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checkpreviousapplicant_0_with_http_info(applicant, tenant, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant: The ID of the application that will be retrieved. (required)
        :param str tenant: The ID of the tenant that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicant', 'tenant']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkpreviousapplicant_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicant' is set
        if ('applicant' not in params or
                params['applicant'] is None):
            raise ValueError("Missing the required parameter `applicant` when calling `checkpreviousapplicant_0`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in params or
                params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `checkpreviousapplicant_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicant' in params:
            path_params['applicant'] = params['applicant']  # noqa: E501
        if 'tenant' in params:
            path_params['tenant'] = params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/jobs/restore-previous', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createapplicants(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new applicants  # noqa: E501

        Create a new applicants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapplicants(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Applicants body: Data used to create a new applicants (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.createapplicants_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.createapplicants_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def createapplicants_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new applicants  # noqa: E501

        Create a new applicants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapplicants_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Applicants body: Data used to create a new applicants (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `createapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `createapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `createapplicants`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `createapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createapplicantsreferral(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new applicant based on a referral from an employee  # noqa: E501

        Create a new applicant based on a referral from an employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapplicantsreferral(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Applicants body: Data used to create a new applicant based on a referral from an employee (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.createapplicantsreferral_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.createapplicantsreferral_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def createapplicantsreferral_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new applicant based on a referral from an employee  # noqa: E501

        Create a new applicant based on a referral from an employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapplicantsreferral_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Applicants body: Data used to create a new applicant based on a referral from an employee (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createapplicantsreferral" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `createapplicantsreferral`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `createapplicantsreferral`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `createapplicantsreferral`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `createapplicantsreferral`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/referral', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deleteapplicants(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Delete a specific applicant instance.  # noqa: E501

        Delete a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deleteapplicants(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be deleted. (required)
        :param Applicants body: Data used to update applicants (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.deleteapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.deleteapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def deleteapplicants_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Delete a specific applicant instance.  # noqa: E501

        Delete a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deleteapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be deleted. (required)
        :param Applicants body: Data used to update applicants (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deleteapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `deleteapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `deleteapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `deleteapplicants`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `deleteapplicants`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deleteapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/{applicantsId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exportapplicants(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Export applicants to CSV  # noqa: E501

        This operation allows you to export applicants to CSV using an ElastiSearch Query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.exportapplicants(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.exportapplicants_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.exportapplicants_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def exportapplicants_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Export applicants to CSV  # noqa: E501

        This operation allows you to export applicants to CSV using an ElastiSearch Query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.exportapplicants_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exportapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `exportapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `exportapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `exportapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getallapplicantssreferral(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple referral resources.  # noqa: E501

        This operation allows you to list referral resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getallapplicantssreferral(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getallapplicantssreferral_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.getallapplicantssreferral_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def getallapplicantssreferral_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple referral resources.  # noqa: E501

        This operation allows you to list referral resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getallapplicantssreferral_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getallapplicantssreferral" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getallapplicantssreferral`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getallapplicantssreferral`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getallapplicantssreferral`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/referrals-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplicantassessments(self, x_tenant, x_version, applicants_id, token, mapping, **kwargs):  # noqa: E501
        """Return mindsight assessments of a specific applicant instance.  # noqa: E501

        Return mindsight assessments of a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantassessments(x_tenant, x_version, applicants_id, token, mapping, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be retrieved. (required)
        :param str token: The token generated in screening test. (required)
        :param str mapping: The ID of mapping that applicant is requiring the test. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplicantassessments_with_http_info(x_tenant, x_version, applicants_id, token, mapping, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplicantassessments_with_http_info(x_tenant, x_version, applicants_id, token, mapping, **kwargs)  # noqa: E501
            return data

    def getapplicantassessments_with_http_info(self, x_tenant, x_version, applicants_id, token, mapping, **kwargs):  # noqa: E501
        """Return mindsight assessments of a specific applicant instance.  # noqa: E501

        Return mindsight assessments of a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantassessments_with_http_info(x_tenant, x_version, applicants_id, token, mapping, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be retrieved. (required)
        :param str token: The token generated in screening test. (required)
        :param str mapping: The ID of mapping that applicant is requiring the test. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'applicants_id', 'token', 'mapping']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplicantassessments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getapplicantassessments`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getapplicantassessments`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `getapplicantassessments`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `getapplicantassessments`")  # noqa: E501
        # verify the required parameter 'mapping' is set
        if ('mapping' not in params or
                params['mapping'] is None):
            raise ValueError("Missing the required parameter `mapping` when calling `getapplicantassessments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'mapping' in params:
            query_params.append(('mapping', params['mapping']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/{applicantsId}/mindsight', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplicants(self, authorization, x_tenant, x_version, applicants_id, **kwargs):  # noqa: E501
        """Return a specific applicant instance.  # noqa: E501

        Return a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicants(authorization, x_tenant, x_version, applicants_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, **kwargs)  # noqa: E501
            return data

    def getapplicants_with_http_info(self, authorization, x_tenant, x_version, applicants_id, **kwargs):  # noqa: E501
        """Return a specific applicant instance.  # noqa: E501

        Return a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getapplicants`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `getapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/{applicantsId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplicantss(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple applicants resources.  # noqa: E501

        This operation allows you to list and search for applicants resources provided query arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantss(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param int page: The page of records. Used for pagination.
        :param int page_size: How many records to limit the output.
        :param str order_by: Which fields to sort the records on. You can use minus sign to have a reverse order. Ex.: orderBy=-name
        :param str select_0: Select which fields will be returned by the query.
        :param str select_1: Select which fields will be returned by the query. One select for each field
        :param str filter_by_name_like: Filter the results. This is just a sample. You can use a better tool like postman to try other filters. Ex: filterBy[fieldA]=some value&filterBy[fieldB][fieldDfromC]=other value
        :param str filter_by_created_at_from: Filter the results greatter than a given date
        :param str filter_by_created_at_to: Filter the results lower than a given date
        :param str filter_by_or_0_name_like: Filter the results associating more than one parameter. This is just a sample using 'or' sintax.
        :param str filter_by_or_1_email_like: Filter the results associating more than one parameter. This is just a sample using 'or' sintax.
        :param str filter_by_custom_fields_0_field: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str filter_by_custom_fields_0_value_from: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str count_0_filter_by_name_like: Return the total records from a filterBy query. Ex.: count[0][filterBy][name][like]=Ricardo
        :param str count_1_filter_by_created_at_from: Return the total records from createdFrom a specific date. Ex.: count[1][filterBy][createdAt][from]=2015-01-01T02:00:00.000Z
        :param str search_by: Make a text search on main fields. Name and e-mail have higher scores.
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplicantss_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplicantss_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def getapplicantss_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple applicants resources.  # noqa: E501

        This operation allows you to list and search for applicants resources provided query arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantss_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param int page: The page of records. Used for pagination.
        :param int page_size: How many records to limit the output.
        :param str order_by: Which fields to sort the records on. You can use minus sign to have a reverse order. Ex.: orderBy=-name
        :param str select_0: Select which fields will be returned by the query.
        :param str select_1: Select which fields will be returned by the query. One select for each field
        :param str filter_by_name_like: Filter the results. This is just a sample. You can use a better tool like postman to try other filters. Ex: filterBy[fieldA]=some value&filterBy[fieldB][fieldDfromC]=other value
        :param str filter_by_created_at_from: Filter the results greatter than a given date
        :param str filter_by_created_at_to: Filter the results lower than a given date
        :param str filter_by_or_0_name_like: Filter the results associating more than one parameter. This is just a sample using 'or' sintax.
        :param str filter_by_or_1_email_like: Filter the results associating more than one parameter. This is just a sample using 'or' sintax.
        :param str filter_by_custom_fields_0_field: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str filter_by_custom_fields_0_value_from: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str count_0_filter_by_name_like: Return the total records from a filterBy query. Ex.: count[0][filterBy][name][like]=Ricardo
        :param str count_1_filter_by_created_at_from: Return the total records from createdFrom a specific date. Ex.: count[1][filterBy][createdAt][from]=2015-01-01T02:00:00.000Z
        :param str search_by: Make a text search on main fields. Name and e-mail have higher scores.
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'page', 'page_size', 'order_by', 'select_0', 'select_1', 'filter_by_name_like', 'filter_by_created_at_from', 'filter_by_created_at_to', 'filter_by_or_0_name_like', 'filter_by_or_1_email_like', 'filter_by_custom_fields_0_field', 'filter_by_custom_fields_0_value_from', 'count_0_filter_by_name_like', 'count_1_filter_by_created_at_from', 'search_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplicantss" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getapplicantss`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getapplicantss`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getapplicantss`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'select_0' in params:
            query_params.append(('select[0]', params['select_0']))  # noqa: E501
        if 'select_1' in params:
            query_params.append(('select[1]', params['select_1']))  # noqa: E501
        if 'filter_by_name_like' in params:
            query_params.append(('filterBy[name][like]', params['filter_by_name_like']))  # noqa: E501
        if 'filter_by_created_at_from' in params:
            query_params.append(('filterBy[createdAt][from]', params['filter_by_created_at_from']))  # noqa: E501
        if 'filter_by_created_at_to' in params:
            query_params.append(('filterBy[createdAt][to]', params['filter_by_created_at_to']))  # noqa: E501
        if 'filter_by_or_0_name_like' in params:
            query_params.append(('filterBy[or][0][name][like]', params['filter_by_or_0_name_like']))  # noqa: E501
        if 'filter_by_or_1_email_like' in params:
            query_params.append(('filterBy[or][1][email][like]', params['filter_by_or_1_email_like']))  # noqa: E501
        if 'filter_by_custom_fields_0_field' in params:
            query_params.append(('filterBy[customFields][0][field]', params['filter_by_custom_fields_0_field']))  # noqa: E501
        if 'filter_by_custom_fields_0_value_from' in params:
            query_params.append(('filterBy[customFields][0][value][from]', params['filter_by_custom_fields_0_value_from']))  # noqa: E501
        if 'count_0_filter_by_name_like' in params:
            query_params.append(('count[0][filterBy][name][like]', params['count_0_filter_by_name_like']))  # noqa: E501
        if 'count_1_filter_by_created_at_from' in params:
            query_params.append(('count[1][filterBy][createdAt][from]', params['count_1_filter_by_created_at_from']))  # noqa: E501
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplicantssreferral(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple referral applicants resources.  # noqa: E501

        This operation allows you to list referral applicants resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantssreferral(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplicantssreferral_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplicantssreferral_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def getapplicantssreferral_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple referral applicants resources.  # noqa: E501

        This operation allows you to list referral applicants resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantssreferral_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplicantssreferral" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getapplicantssreferral`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getapplicantssreferral`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getapplicantssreferral`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/referrals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplication(self, application, **kwargs):  # noqa: E501
        """Return a specific application instance which already started applying.  # noqa: E501

        Return a specific application instance which already started applying.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplication(application, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application: The ID of the application that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplication_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplication_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def getapplication_with_http_info(self, application, **kwargs):  # noqa: E501
        """Return a specific application instance which already started applying.  # noqa: E501

        Return a specific application instance which already started applying.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplication_with_http_info(application, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application: The ID of the application that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `getapplication`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/jobs/restore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplication_0(self, application, **kwargs):  # noqa: E501
        """Return a specific application instance which already started applying.  # noqa: E501

        Return a specific application instance which already started applying.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplication_0(application, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application: The ID of the application that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplication_0_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplication_0_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def getapplication_0_with_http_info(self, application, **kwargs):  # noqa: E501
        """Return a specific application instance which already started applying.  # noqa: E501

        Return a specific application instance which already started applying.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplication_0_with_http_info(application, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application: The ID of the application that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplication_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `getapplication_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/jobs/cache', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_cv(self, authorization, x_tenant, x_version, file, **kwargs):  # noqa: E501
        """Return a parsed applicant from a given CV.  # noqa: E501

        Return a parsed applicant from a given CV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.parse_cv(authorization, x_tenant, x_version, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str file: The full path of file that will be parsed. (required)
        :param str captcha_token: The captcha token. It will be required in case the user is not logged in when parsing a file.
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.parse_cv_with_http_info(authorization, x_tenant, x_version, file, **kwargs)  # noqa: E501
        else:
            (data) = self.parse_cv_with_http_info(authorization, x_tenant, x_version, file, **kwargs)  # noqa: E501
            return data

    def parse_cv_with_http_info(self, authorization, x_tenant, x_version, file, **kwargs):  # noqa: E501
        """Return a parsed applicant from a given CV.  # noqa: E501

        Return a parsed applicant from a given CV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.parse_cv_with_http_info(authorization, x_tenant, x_version, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str file: The full path of file that will be parsed. (required)
        :param str captcha_token: The captcha token. It will be required in case the user is not logged in when parsing a file.
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'file', 'captcha_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_cv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `parse_cv`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `parse_cv`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `parse_cv`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `parse_cv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501
        if 'captcha_token' in params:
            query_params.append(('captchaToken', params['captcha_token']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/any/parse-cv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sendapplicantxerpa(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Send applicant to Xerpa  # noqa: E501

        This operation allows you to send an applicant to Xerpa.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sendapplicantxerpa(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sendapplicantxerpa_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.sendapplicantxerpa_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def sendapplicantxerpa_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Send applicant to Xerpa  # noqa: E501

        This operation allows you to send an applicant to Xerpa.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sendapplicantxerpa_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: ApplicantsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sendapplicantxerpa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `sendapplicantxerpa`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `sendapplicantxerpa`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `sendapplicantxerpa`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/send-to-xerpa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sendlogintokenapplicant(self, email, tenant, **kwargs):  # noqa: E501
        """Send an email to the applicant for login.  # noqa: E501

        Send an email to the applicant for login.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sendlogintokenapplicant(email, tenant, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email of the application that will be send. (required)
        :param str tenant: The ID of the tenant that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sendlogintokenapplicant_with_http_info(email, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.sendlogintokenapplicant_with_http_info(email, tenant, **kwargs)  # noqa: E501
            return data

    def sendlogintokenapplicant_with_http_info(self, email, tenant, **kwargs):  # noqa: E501
        """Send an email to the applicant for login.  # noqa: E501

        Send an email to the applicant for login.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sendlogintokenapplicant_with_http_info(email, tenant, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email of the application that will be send. (required)
        :param str tenant: The ID of the tenant that will be retrieved. (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'tenant']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sendlogintokenapplicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sendlogintokenapplicant`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in params or
                params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `sendlogintokenapplicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501
        if 'tenant' in params:
            path_params['tenant'] = params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/jobs/send-login-token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updateapplicants(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Update a specific applicant instance.  # noqa: E501

        Update a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicants(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Applicants body: Data used to update applicants (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updateapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updateapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def updateapplicants_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Update a specific applicant instance.  # noqa: E501

        Update a specific applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicants_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Applicants body: Data used to update applicants (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updateapplicants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updateapplicants`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updateapplicants`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updateapplicants`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `updateapplicants`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updateapplicants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/{applicantsId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updateapplicantscustomfields(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Update a specific customFields of an applicant instance.  # noqa: E501

        Update a specific customFields of an applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicantscustomfields(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Applicants body: Data used to update applicants (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updateapplicantscustomfields_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updateapplicantscustomfields_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def updateapplicantscustomfields_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Update a specific customFields of an applicant instance.  # noqa: E501

        Update a specific customFields of an applicant instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicantscustomfields_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Applicants body: Data used to update applicants (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updateapplicantscustomfields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updateapplicantscustomfields`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updateapplicantscustomfields`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updateapplicantscustomfields`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `updateapplicantscustomfields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updateapplicantscustomfields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/{applicantsId}/custom-fields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updateapplicantsreferralmapping(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Update a referral setting the mapping after creation  # noqa: E501

        Update a referral setting the mapping after creation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicantsreferralmapping(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Applicants body: Data used to create a new applicant based on a referral from an employee (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updateapplicantsreferralmapping_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updateapplicantsreferralmapping_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def updateapplicantsreferralmapping_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Update a referral setting the mapping after creation  # noqa: E501

        Update a referral setting the mapping after creation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicantsreferralmapping_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Applicants body: Data used to create a new applicant based on a referral from an employee (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updateapplicantsreferralmapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updateapplicantsreferralmapping`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updateapplicantsreferralmapping`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updateapplicantsreferralmapping`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updateapplicantsreferralmapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/referral/mapping', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updateapplicantsscreeningtest(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Update and evaluate a specific applicant screeningTest instance.  # noqa: E501

        Update and evaluate a specific applicant screeningTest instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicantsscreeningtest(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Applicants body: Data used to update applicants screeningTest (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updateapplicantsscreeningtest_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updateapplicantsscreeningtest_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def updateapplicantsscreeningtest_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Update and evaluate a specific applicant screeningTest instance.  # noqa: E501

        Update and evaluate a specific applicant screeningTest instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updateapplicantsscreeningtest_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Applicants body: Data used to update applicants screeningTest (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updateapplicantsscreeningtest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updateapplicantsscreeningtest`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updateapplicantsscreeningtest`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updateapplicantsscreeningtest`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `updateapplicantsscreeningtest`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updateapplicantsscreeningtest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicants/{applicantsId}/screeningTest', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
