# coding: utf-8

"""
    Kenoby

    Issues or Questions? <a href=\"mailto:devs@kenoby.com\" target=\"_blank\">Send us an e-mail</a>.<br>                      For better experience <a href=\"http://api.kenoby.com/swagger.json\" target=\"_blank\">Download our swagger.json</a>                      and use it on <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MappingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def approvemappings(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Approve an applicant to next stage.  # noqa: E501

        Approve an applicant to next stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.approvemappings(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.approvemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.approvemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
            return data

    def approvemappings_with_http_info(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Approve an applicant to next stage.  # noqa: E501

        Approve an applicant to next stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.approvemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approvemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `approvemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `approvemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `approvemappings`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `approvemappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `approvemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}/approve', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approvemappings_0(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Approve applicants to next stage.  # noqa: E501

        Approve applicants to next stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.approvemappings_0(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.approvemappings_0_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.approvemappings_0_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
            return data

    def approvemappings_0_with_http_info(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Approve applicants to next stage.  # noqa: E501

        Approve applicants to next stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.approvemappings_0_with_http_info(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approvemappings_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `approvemappings_0`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `approvemappings_0`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `approvemappings_0`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `approvemappings_0`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `approvemappings_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancelmappings(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Rollback the applicant to previews stage.  # noqa: E501

        Rollback the applicant to previews stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancelmappings(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancelmappings_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.cancelmappings_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
            return data

    def cancelmappings_with_http_info(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Rollback the applicant to previews stage.  # noqa: E501

        Rollback the applicant to previews stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancelmappings_with_http_info(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancelmappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `cancelmappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `cancelmappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `cancelmappings`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `cancelmappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cancelmappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createmappingsreferral(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new mapping based on a referral from an employee  # noqa: E501

        Create a new mapping based on a referral from an employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createmappingsreferral(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Mappings body: Data used to create a new mappings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.createmappingsreferral_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.createmappingsreferral_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def createmappingsreferral_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Create a new mapping based on a referral from an employee  # noqa: E501

        Create a new mapping based on a referral from an employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createmappingsreferral_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Mappings body: Data used to create a new mappings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createmappingsreferral" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `createmappingsreferral`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `createmappingsreferral`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `createmappingsreferral`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `createmappingsreferral`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletemappings(self, authorization, x_tenant, x_version, mappings_id, **kwargs):  # noqa: E501
        """Delete a specific mappings  # noqa: E501

        Delete a specific mappings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deletemappings(authorization, x_tenant, x_version, mappings_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.deletemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deletemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, **kwargs)  # noqa: E501
            return data

    def deletemappings_with_http_info(self, authorization, x_tenant, x_version, mappings_id, **kwargs):  # noqa: E501
        """Delete a specific mappings  # noqa: E501

        Delete a specific mappings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deletemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `deletemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `deletemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `deletemappings`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `deletemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generateandsendtests(self, x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs):  # noqa: E501
        """Generate tests if needed and send by email.  # noqa: E501

        Generate tests if needed and send by email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generateandsendtests(x_tenant, x_version, position_id, mappings, stage_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position_id: The ID of the position that will be used. (required)
        :param str mappings: The ID of the mappings that will be sent. (required)
        :param str stage_id: The ID of the stage that will be used. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generateandsendtests_with_http_info(x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.generateandsendtests_with_http_info(x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs)  # noqa: E501
            return data

    def generateandsendtests_with_http_info(self, x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs):  # noqa: E501
        """Generate tests if needed and send by email.  # noqa: E501

        Generate tests if needed and send by email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generateandsendtests_with_http_info(x_tenant, x_version, position_id, mappings, stage_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position_id: The ID of the position that will be used. (required)
        :param str mappings: The ID of the mappings that will be sent. (required)
        :param str stage_id: The ID of the stage that will be used. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'position_id', 'mappings', 'stage_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generateandsendtests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `generateandsendtests`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `generateandsendtests`")  # noqa: E501
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params or
                params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `generateandsendtests`")  # noqa: E501
        # verify the required parameter 'mappings' is set
        if ('mappings' not in params or
                params['mappings'] is None):
            raise ValueError("Missing the required parameter `mappings` when calling `generateandsendtests`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `generateandsendtests`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generateandsendtests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']  # noqa: E501
        if 'mappings' in params:
            path_params['mappings'] = params['mappings']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/generate-and-send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generateandsendtests_0(self, x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs):  # noqa: E501
        """Generate tests if needed and send a reminder.  # noqa: E501

        Generate tests if needed and send a reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generateandsendtests_0(x_tenant, x_version, position_id, mappings, stage_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position_id: The ID of the position that will be used. (required)
        :param str mappings: The ID of the mappings that will be sent. (required)
        :param str stage_id: The ID of the stage that will be used. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generateandsendtests_0_with_http_info(x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.generateandsendtests_0_with_http_info(x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs)  # noqa: E501
            return data

    def generateandsendtests_0_with_http_info(self, x_tenant, x_version, position_id, mappings, stage_id, body, **kwargs):  # noqa: E501
        """Generate tests if needed and send a reminder.  # noqa: E501

        Generate tests if needed and send a reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generateandsendtests_0_with_http_info(x_tenant, x_version, position_id, mappings, stage_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position_id: The ID of the position that will be used. (required)
        :param str mappings: The ID of the mappings that will be sent. (required)
        :param str stage_id: The ID of the stage that will be used. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'position_id', 'mappings', 'stage_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generateandsendtests_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `generateandsendtests_0`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `generateandsendtests_0`")  # noqa: E501
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params or
                params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `generateandsendtests_0`")  # noqa: E501
        # verify the required parameter 'mappings' is set
        if ('mappings' not in params or
                params['mappings'] is None):
            raise ValueError("Missing the required parameter `mappings` when calling `generateandsendtests_0`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `generateandsendtests_0`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generateandsendtests_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']  # noqa: E501
        if 'mappings' in params:
            path_params['mappings'] = params['mappings']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/send-reminder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getcurrentquestiontest(self, x_tenant, x_version, mappings_id, token, stage_id, original_test, body, **kwargs):  # noqa: E501
        """Validate token and return current question data.  # noqa: E501

        Validate token and return current question data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getcurrentquestiontest(x_tenant, x_version, mappings_id, token, stage_id, original_test, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param str token: The ID of the mappings that will be checked. (required)
        :param str stage_id: The ID of the stage that will be checked. (required)
        :param str original_test: The ID of the position's test that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getcurrentquestiontest_with_http_info(x_tenant, x_version, mappings_id, token, stage_id, original_test, body, **kwargs)  # noqa: E501
        else:
            (data) = self.getcurrentquestiontest_with_http_info(x_tenant, x_version, mappings_id, token, stage_id, original_test, body, **kwargs)  # noqa: E501
            return data

    def getcurrentquestiontest_with_http_info(self, x_tenant, x_version, mappings_id, token, stage_id, original_test, body, **kwargs):  # noqa: E501
        """Validate token and return current question data.  # noqa: E501

        Validate token and return current question data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getcurrentquestiontest_with_http_info(x_tenant, x_version, mappings_id, token, stage_id, original_test, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param str token: The ID of the mappings that will be checked. (required)
        :param str stage_id: The ID of the stage that will be checked. (required)
        :param str original_test: The ID of the position's test that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'mappings_id', 'token', 'stage_id', 'original_test', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getcurrentquestiontest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getcurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getcurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `getcurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `getcurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `getcurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'original_test' is set
        if ('original_test' not in params or
                params['original_test'] is None):
            raise ValueError("Missing the required parameter `original_test` when calling `getcurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `getcurrentquestiontest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501
        if 'original_test' in params:
            path_params['originalTest'] = params['original_test']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/current-question', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmappings(self, authorization, x_tenant, x_version, mappings_id, **kwargs):  # noqa: E501
        """Return a specific mapping instance.  # noqa: E501

        Return a specific mapping instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getmappings(authorization, x_tenant, x_version, mappings_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be retrieved. (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getmappings_with_http_info(authorization, x_tenant, x_version, mappings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getmappings_with_http_info(authorization, x_tenant, x_version, mappings_id, **kwargs)  # noqa: E501
            return data

    def getmappings_with_http_info(self, authorization, x_tenant, x_version, mappings_id, **kwargs):  # noqa: E501
        """Return a specific mapping instance.  # noqa: E501

        Return a specific mapping instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getmappings_with_http_info(authorization, x_tenant, x_version, mappings_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be retrieved. (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getmappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getmappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getmappings`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `getmappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmappings_0(self, authorization, x_tenant, x_version, mappings_id, **kwargs):  # noqa: E501
        """Return a specific mapping instance with focus on tests.  # noqa: E501

        Return a specific mapping instance with focus on tests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getmappings_0(authorization, x_tenant, x_version, mappings_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be retrieved. (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getmappings_0_with_http_info(authorization, x_tenant, x_version, mappings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getmappings_0_with_http_info(authorization, x_tenant, x_version, mappings_id, **kwargs)  # noqa: E501
            return data

    def getmappings_0_with_http_info(self, authorization, x_tenant, x_version, mappings_id, **kwargs):  # noqa: E501
        """Return a specific mapping instance with focus on tests.  # noqa: E501

        Return a specific mapping instance with focus on tests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getmappings_0_with_http_info(authorization, x_tenant, x_version, mappings_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be retrieved. (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmappings_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getmappings_0`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getmappings_0`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getmappings_0`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `getmappings_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}/list-tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmappingss(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple mappings resources.  # noqa: E501

        This operation allows you to list and search for mappings resources provided query arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getmappingss(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param int page: The page of records. Used for pagination.
        :param int page_size: How many records to limit the output.
        :param str order_by: Which fields to sort the records on. You can use minus sign to have a reverse order. Ex.: orderBy=-name
        :param str select_0: Select which fields will be returned by the query.
        :param str select_1: Select which fields will be returned by the query. One select for each field
        :param str filter_by_position: Filter the results. This is just a sample. You can use a better tool like postman to try other filters. Ex: filterBy[fieldA]=some value&filterBy[fieldB][fieldDfromC]=other value
        :param str filter_by_applicant: Filter the results. This is just a sample. You can use a better tool like postman to try other filters. Ex: filterBy[fieldA]=some value&filterBy[fieldB][fieldDfromC]=other value
        :param str filter_by_created_at_from: Filter the results greatter than a given date
        :param str filter_by_created_at_to: Filter the results lower than a given date
        :param str filter_by_custom_fields_0_field: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str filter_by_custom_fields_0_value_from: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str count_0_filter_by_created_at_from: Return the total records from createdFrom a specific date. Ex.: count[1][filterBy][createdAt][from]=2015-01-01T02:00:00.000Z
        :return: MappingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getmappingss_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.getmappingss_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def getmappingss_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """List multiple mappings resources.  # noqa: E501

        This operation allows you to list and search for mappings resources provided query arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getmappingss_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param int page: The page of records. Used for pagination.
        :param int page_size: How many records to limit the output.
        :param str order_by: Which fields to sort the records on. You can use minus sign to have a reverse order. Ex.: orderBy=-name
        :param str select_0: Select which fields will be returned by the query.
        :param str select_1: Select which fields will be returned by the query. One select for each field
        :param str filter_by_position: Filter the results. This is just a sample. You can use a better tool like postman to try other filters. Ex: filterBy[fieldA]=some value&filterBy[fieldB][fieldDfromC]=other value
        :param str filter_by_applicant: Filter the results. This is just a sample. You can use a better tool like postman to try other filters. Ex: filterBy[fieldA]=some value&filterBy[fieldB][fieldDfromC]=other value
        :param str filter_by_created_at_from: Filter the results greatter than a given date
        :param str filter_by_created_at_to: Filter the results lower than a given date
        :param str filter_by_custom_fields_0_field: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str filter_by_custom_fields_0_value_from: Filter the results associating more than one parameter. This is just a sample using 'and' sintax.
        :param str count_0_filter_by_created_at_from: Return the total records from createdFrom a specific date. Ex.: count[1][filterBy][createdAt][from]=2015-01-01T02:00:00.000Z
        :return: MappingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'page', 'page_size', 'order_by', 'select_0', 'select_1', 'filter_by_position', 'filter_by_applicant', 'filter_by_created_at_from', 'filter_by_created_at_to', 'filter_by_custom_fields_0_field', 'filter_by_custom_fields_0_value_from', 'count_0_filter_by_created_at_from']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmappingss" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getmappingss`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getmappingss`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `getmappingss`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'select_0' in params:
            query_params.append(('select[0]', params['select_0']))  # noqa: E501
        if 'select_1' in params:
            query_params.append(('select[1]', params['select_1']))  # noqa: E501
        if 'filter_by_position' in params:
            query_params.append(('filterBy[position]', params['filter_by_position']))  # noqa: E501
        if 'filter_by_applicant' in params:
            query_params.append(('filterBy[applicant]', params['filter_by_applicant']))  # noqa: E501
        if 'filter_by_created_at_from' in params:
            query_params.append(('filterBy[createdAt][from]', params['filter_by_created_at_from']))  # noqa: E501
        if 'filter_by_created_at_to' in params:
            query_params.append(('filterBy[createdAt][to]', params['filter_by_created_at_to']))  # noqa: E501
        if 'filter_by_custom_fields_0_field' in params:
            query_params.append(('filterBy[customFields][0][field]', params['filter_by_custom_fields_0_field']))  # noqa: E501
        if 'filter_by_custom_fields_0_value_from' in params:
            query_params.append(('filterBy[customFields][0][value][from]', params['filter_by_custom_fields_0_value_from']))  # noqa: E501
        if 'count_0_filter_by_created_at_from' in params:
            query_params.append(('count[0][filterBy][createdAt][from]', params['count_0_filter_by_created_at_from']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MappingsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incompatiblemappings(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Send mappings to incompatible in position.  # noqa: E501

        Send mappings to incompatible in position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incompatiblemappings(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incompatiblemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.incompatiblemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def incompatiblemappings_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Send mappings to incompatible in position.  # noqa: E501

        Send mappings to incompatible in position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incompatiblemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incompatiblemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `incompatiblemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `incompatiblemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `incompatiblemappings`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `incompatiblemappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `incompatiblemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/incompatible-progress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rejectmapping(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Reject the applicant.  # noqa: E501

        Reject the applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rejectmapping(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rejectmapping_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.rejectmapping_with_http_info(authorization, x_tenant, x_version, mappings_id, body, **kwargs)  # noqa: E501
            return data

    def rejectmapping_with_http_info(self, authorization, x_tenant, x_version, mappings_id, body, **kwargs):  # noqa: E501
        """Reject the applicant.  # noqa: E501

        Reject the applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rejectmapping_with_http_info(authorization, x_tenant, x_version, mappings_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rejectmapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `rejectmapping`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `rejectmapping`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `rejectmapping`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `rejectmapping`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rejectmapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}/reject', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rejectmappings(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Reject the applicant.  # noqa: E501

        Reject the applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rejectmappings(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rejectmappings_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.rejectmappings_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def rejectmappings_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Reject the applicant.  # noqa: E501

        Reject the applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rejectmappings_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rejectmappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `rejectmappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `rejectmappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `rejectmappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rejectmappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/reject', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removemappings(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Remove mappings from position.  # noqa: E501

        Remove mappings from position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.removemappings(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.removemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.removemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def removemappings_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Remove mappings from position.  # noqa: E501

        Remove mappings from position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.removemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `removemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `removemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `removemappings`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `removemappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `removemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def savecurrentquestiontest(self, x_tenant, x_version, mappings_id, token, body, **kwargs):  # noqa: E501
        """Validate token and save current question answer.  # noqa: E501

        Validate token and save current question answer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.savecurrentquestiontest(x_tenant, x_version, mappings_id, token, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param str token: The ID of the mappings that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.savecurrentquestiontest_with_http_info(x_tenant, x_version, mappings_id, token, body, **kwargs)  # noqa: E501
        else:
            (data) = self.savecurrentquestiontest_with_http_info(x_tenant, x_version, mappings_id, token, body, **kwargs)  # noqa: E501
            return data

    def savecurrentquestiontest_with_http_info(self, x_tenant, x_version, mappings_id, token, body, **kwargs):  # noqa: E501
        """Validate token and save current question answer.  # noqa: E501

        Validate token and save current question answer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.savecurrentquestiontest_with_http_info(x_tenant, x_version, mappings_id, token, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be checked. (required)
        :param str token: The ID of the mappings that will be checked. (required)
        :param Mappings body: Data used to check mapping (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_version', 'mappings_id', 'token', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method savecurrentquestiontest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `savecurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `savecurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `savecurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `savecurrentquestiontest`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `savecurrentquestiontest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/save-current-question', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def setignoretestsenrolledmapping(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Update the flag to ignore tests on Enrolled stage  # noqa: E501

        Update the flag to ignore tests on Enrolled stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.setignoretestsenrolledmapping(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Mappings body: Body needs the ignoreEnrolledTests flag to be true or false (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.setignoretestsenrolledmapping_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.setignoretestsenrolledmapping_with_http_info(authorization, x_tenant, x_version, body, **kwargs)  # noqa: E501
            return data

    def setignoretestsenrolledmapping_with_http_info(self, authorization, x_tenant, x_version, body, **kwargs):  # noqa: E501
        """Update the flag to ignore tests on Enrolled stage  # noqa: E501

        Update the flag to ignore tests on Enrolled stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.setignoretestsenrolledmapping_with_http_info(authorization, x_tenant, x_version, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param Mappings body: Body needs the ignoreEnrolledTests flag to be true or false (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setignoretestsenrolledmapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `setignoretestsenrolledmapping`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `setignoretestsenrolledmapping`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `setignoretestsenrolledmapping`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `setignoretestsenrolledmapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/:id/set-ignore-tests-enrolled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triagemappings(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Triage all applicants by position in progress page  # noqa: E501

        Triage all applicants by position in progress page  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.triagemappings(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.triagemappings_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.triagemappings_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def triagemappings_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Triage all applicants by position in progress page  # noqa: E501

        Triage all applicants by position in progress page  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.triagemappings_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triagemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `triagemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `triagemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `triagemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/triage-progress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triagemappings_0(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Triage all applicants by position  # noqa: E501

        Triage all applicants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.triagemappings_0(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.triagemappings_0_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.triagemappings_0_with_http_info(authorization, x_tenant, x_version, **kwargs)  # noqa: E501
            return data

    def triagemappings_0_with_http_info(self, authorization, x_tenant, x_version, **kwargs):  # noqa: E501
        """Triage all applicants by position  # noqa: E501

        Triage all applicants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.triagemappings_0_with_http_info(authorization, x_tenant, x_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triagemappings_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `triagemappings_0`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `triagemappings_0`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `triagemappings_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/triage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undotriagemappings(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Send mappings to enrolled stage from position, undo triage.  # noqa: E501

        Send mappings to enrolled stage from position, undo triage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.undotriagemappings(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.undotriagemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.undotriagemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, **kwargs)  # noqa: E501
            return data

    def undotriagemappings_with_http_info(self, authorization, x_tenant, x_version, applicants_id, body, **kwargs):  # noqa: E501
        """Send mappings to enrolled stage from position, undo triage.  # noqa: E501

        Send mappings to enrolled stage from position, undo triage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.undotriagemappings_with_http_info(authorization, x_tenant, x_version, applicants_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str applicants_id: The ID of the applicants that will be updated. (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'applicants_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undotriagemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `undotriagemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `undotriagemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `undotriagemappings`")  # noqa: E501
        # verify the required parameter 'applicants_id' is set
        if ('applicants_id' not in params or
                params['applicants_id'] is None):
            raise ValueError("Missing the required parameter `applicants_id` when calling `undotriagemappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `undotriagemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicants_id' in params:
            path_params['applicantsId'] = params['applicants_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/undo-triage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatemappings(self, authorization, x_tenant, x_version, mappings_id, undo, body, **kwargs):  # noqa: E501
        """Update a specific mapping instance.  # noqa: E501

        Update a specific mapping instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatemappings(authorization, x_tenant, x_version, mappings_id, undo, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param str undo: Send true if you need to decrease the mapped property (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updatemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, undo, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updatemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, undo, body, **kwargs)  # noqa: E501
            return data

    def updatemappings_with_http_info(self, authorization, x_tenant, x_version, mappings_id, undo, body, **kwargs):  # noqa: E501
        """Update a specific mapping instance.  # noqa: E501

        Update a specific mapping instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatemappings_with_http_info(authorization, x_tenant, x_version, mappings_id, undo, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str mappings_id: The ID of the mappings that will be updated. (required)
        :param str undo: Send true if you need to decrease the mapped property (required)
        :param Mappings body: Data used to update mappings (required)
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'mappings_id', 'undo', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatemappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updatemappings`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updatemappings`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updatemappings`")  # noqa: E501
        # verify the required parameter 'mappings_id' is set
        if ('mappings_id' not in params or
                params['mappings_id'] is None):
            raise ValueError("Missing the required parameter `mappings_id` when calling `updatemappings`")  # noqa: E501
        # verify the required parameter 'undo' is set
        if ('undo' not in params or
                params['undo'] is None):
            raise ValueError("Missing the required parameter `undo` when calling `updatemappings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updatemappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mappings_id' in params:
            path_params['mappingsId'] = params['mappings_id']  # noqa: E501

        query_params = []
        if 'undo' in params:
            query_params.append(('undo', params['undo']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{mappingsId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatestageorder(self, authorization, x_tenant, x_version, position_id, body, **kwargs):  # noqa: E501
        """Update mapping manual order.  # noqa: E501

        Update mapping manual order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatestageorder(authorization, x_tenant, x_version, position_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position_id: The ID of the position that will be updated. (required)
        :param Mappings body: Array of Mappings ID that will be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.updatestageorder_with_http_info(authorization, x_tenant, x_version, position_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.updatestageorder_with_http_info(authorization, x_tenant, x_version, position_id, body, **kwargs)  # noqa: E501
            return data

    def updatestageorder_with_http_info(self, authorization, x_tenant, x_version, position_id, body, **kwargs):  # noqa: E501
        """Update mapping manual order.  # noqa: E501

        Update mapping manual order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatestageorder_with_http_info(authorization, x_tenant, x_version, position_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication. (required)
        :param str x_tenant: The tenant id. (required)
        :param str x_version: The API version. (required)
        :param str position_id: The ID of the position that will be updated. (required)
        :param Mappings body: Array of Mappings ID that will be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_tenant', 'x_version', 'position_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatestageorder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `updatestageorder`")  # noqa: E501
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `updatestageorder`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `updatestageorder`")  # noqa: E501
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params or
                params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `updatestageorder`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updatestageorder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mappings/{positionId}/update-stage-order', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
