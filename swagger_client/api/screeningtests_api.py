# coding: utf-8

"""
    Kenoby

    Issues or Questions? <a href=\"mailto:devs@kenoby.com\" target=\"_blank\">Send us an e-mail</a>.<br>                      For better experience <a href=\"http://api.kenoby.com/swagger.json\" target=\"_blank\">Download our swagger.json</a>                      and use it on <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScreeningtestsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def createapiscreeningtest(self, name, **kwargs):  # noqa: E501
        """Save and return a specific API screening test type.  # noqa: E501

        Save and return a specific API screening test type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapiscreeningtest(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the test. (required)
        :return: ApplicantsscreeningTests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.createapiscreeningtest_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.createapiscreeningtest_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def createapiscreeningtest_with_http_info(self, name, **kwargs):  # noqa: E501
        """Save and return a specific API screening test type.  # noqa: E501

        Save and return a specific API screening test type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapiscreeningtest_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the test. (required)
        :return: ApplicantsscreeningTests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createapiscreeningtest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `createapiscreeningtest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/create-api-test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsscreeningTests',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createapiscreeningtest_0(self, api_tests, **kwargs):  # noqa: E501
        """Save and return apiTests to applicant.  # noqa: E501

        Save and return apiTests to applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapiscreeningtest_0(api_tests, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_tests: The array of API tests. (required)
        :return: ApplicantsscreeningTests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.createapiscreeningtest_0_with_http_info(api_tests, **kwargs)  # noqa: E501
        else:
            (data) = self.createapiscreeningtest_0_with_http_info(api_tests, **kwargs)  # noqa: E501
            return data

    def createapiscreeningtest_0_with_http_info(self, api_tests, **kwargs):  # noqa: E501
        """Save and return apiTests to applicant.  # noqa: E501

        Save and return apiTests to applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createapiscreeningtest_0_with_http_info(api_tests, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_tests: The array of API tests. (required)
        :return: ApplicantsscreeningTests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_tests']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createapiscreeningtest_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_tests' is set
        if ('api_tests' not in params or
                params['api_tests'] is None):
            raise ValueError("Missing the required parameter `api_tests` when calling `createapiscreeningtest_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_tests' in params:
            path_params['apiTests'] = params['api_tests']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screening-tests/add-applicant-scores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantsscreeningTests',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
