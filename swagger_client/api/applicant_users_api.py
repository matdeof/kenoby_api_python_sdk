# coding: utf-8

"""
    Kenoby

    Issues or Questions? <a href=\"mailto:devs@kenoby.com\" target=\"_blank\">Send us an e-mail</a>.<br>                      For better experience <a href=\"http://api.kenoby.com/swagger.json\" target=\"_blank\">Download our swagger.json</a>                      and use it on <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApplicantUsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applicantuserforgotpassword(self, x_tenant, x_portal_token, email, **kwargs):  # noqa: E501
        """Send an email for the applicant with the link to change password.  # noqa: E501

        Send an email for the applicant with the link to change password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.applicantuserforgotpassword(x_tenant, x_portal_token, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str email: The applicant user email. (required)
        :return: ApplicantUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.applicantuserforgotpassword_with_http_info(x_tenant, x_portal_token, email, **kwargs)  # noqa: E501
        else:
            (data) = self.applicantuserforgotpassword_with_http_info(x_tenant, x_portal_token, email, **kwargs)  # noqa: E501
            return data

    def applicantuserforgotpassword_with_http_info(self, x_tenant, x_portal_token, email, **kwargs):  # noqa: E501
        """Send an email for the applicant with the link to change password.  # noqa: E501

        Send an email for the applicant with the link to change password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.applicantuserforgotpassword_with_http_info(x_tenant, x_portal_token, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str email: The applicant user email. (required)
        :return: ApplicantUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'x_portal_token', 'email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applicantuserforgotpassword" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `applicantuserforgotpassword`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `applicantuserforgotpassword`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `applicantuserforgotpassword`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/forgot-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_applicantion_position(self, applicant, position, **kwargs):  # noqa: E501
        """Approve applied position for internal jobsite an determinated applicant.  # noqa: E501

        Approve applied position for internal jobsite an determinated applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.approve_applicantion_position(applicant, position, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant: The applicant id. (required)
        :param str position: The position id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.approve_applicantion_position_with_http_info(applicant, position, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_applicantion_position_with_http_info(applicant, position, **kwargs)  # noqa: E501
            return data

    def approve_applicantion_position_with_http_info(self, applicant, position, **kwargs):  # noqa: E501
        """Approve applied position for internal jobsite an determinated applicant.  # noqa: E501

        Approve applied position for internal jobsite an determinated applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.approve_applicantion_position_with_http_info(applicant, position, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant: The applicant id. (required)
        :param str position: The position id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicant', 'position']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_applicantion_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicant' is set
        if ('applicant' not in params or
                params['applicant'] is None):
            raise ValueError("Missing the required parameter `applicant` when calling `approve_applicantion_position`")  # noqa: E501
        # verify the required parameter 'position' is set
        if ('position' not in params or
                params['position'] is None):
            raise ValueError("Missing the required parameter `position` when calling `approve_applicantion_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicant' in params:
            path_params['applicant'] = params['applicant']  # noqa: E501
        if 'position' in params:
            path_params['position'] = params['position']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/:applicant/:position/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_applicant_user_credentials(self, x_tenant, authorization, x_portal_token, **kwargs):  # noqa: E501
        """Check applicant-user credentials  # noqa: E501

        Check applicant-user credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_applicant_user_credentials(x_tenant, authorization, x_portal_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_applicant_user_credentials_with_http_info(x_tenant, authorization, x_portal_token, **kwargs)  # noqa: E501
        else:
            (data) = self.check_applicant_user_credentials_with_http_info(x_tenant, authorization, x_portal_token, **kwargs)  # noqa: E501
            return data

    def check_applicant_user_credentials_with_http_info(self, x_tenant, authorization, x_portal_token, **kwargs):  # noqa: E501
        """Check applicant-user credentials  # noqa: E501

        Check applicant-user credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_applicant_user_credentials_with_http_info(x_tenant, authorization, x_portal_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'authorization', 'x_portal_token', 'x_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_applicant_user_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `check_applicant_user_credentials`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `check_applicant_user_credentials`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `check_applicant_user_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_portal' in params:
            header_params['x-portal'] = params['x_portal']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_applicant_user_credentials_0(self, authorization, x_portal_token, **kwargs):  # noqa: E501
        """Check applicant-user credentials  # noqa: E501

        Check applicant-user credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_applicant_user_credentials_0(authorization, x_portal_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_applicant_user_credentials_0_with_http_info(authorization, x_portal_token, **kwargs)  # noqa: E501
        else:
            (data) = self.check_applicant_user_credentials_0_with_http_info(authorization, x_portal_token, **kwargs)  # noqa: E501
            return data

    def check_applicant_user_credentials_0_with_http_info(self, authorization, x_portal_token, **kwargs):  # noqa: E501
        """Check applicant-user credentials  # noqa: E501

        Check applicant-user credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_applicant_user_credentials_0_with_http_info(authorization, x_portal_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_portal_token', 'x_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_applicant_user_credentials_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `check_applicant_user_credentials_0`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `check_applicant_user_credentials_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_portal' in params:
            header_params['x-portal'] = params['x_portal']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/credentials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_applicant_user_credentials_1(self, x_tenant, id, **kwargs):  # noqa: E501
        """Request magic link to access web portal  # noqa: E501

        Request magic link to access web portal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_applicant_user_credentials_1(x_tenant, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str id: The ID of the applicant users that will be retrieved. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_applicant_user_credentials_1_with_http_info(x_tenant, id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_applicant_user_credentials_1_with_http_info(x_tenant, id, **kwargs)  # noqa: E501
            return data

    def check_applicant_user_credentials_1_with_http_info(self, x_tenant, id, **kwargs):  # noqa: E501
        """Request magic link to access web portal  # noqa: E501

        Request magic link to access web portal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_applicant_user_credentials_1_with_http_info(x_tenant, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str id: The ID of the applicant users that will be retrieved. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_applicant_user_credentials_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `check_applicant_user_credentials_1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `check_applicant_user_credentials_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/{applicantUser}/magic-link', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_applicant_user_by_email(self, x_tenant, authorization, x_portal_token, email, **kwargs):  # noqa: E501
        """Check if the email is already in use.  # noqa: E501

        Check if the email is already in use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_applicant_user_by_email(x_tenant, authorization, x_portal_token, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str email: The email of the applicant users that will be checked. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_applicant_user_by_email_with_http_info(x_tenant, authorization, x_portal_token, email, **kwargs)  # noqa: E501
        else:
            (data) = self.find_applicant_user_by_email_with_http_info(x_tenant, authorization, x_portal_token, email, **kwargs)  # noqa: E501
            return data

    def find_applicant_user_by_email_with_http_info(self, x_tenant, authorization, x_portal_token, email, **kwargs):  # noqa: E501
        """Check if the email is already in use.  # noqa: E501

        Check if the email is already in use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_applicant_user_by_email_with_http_info(x_tenant, authorization, x_portal_token, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str email: The email of the applicant users that will be checked. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'authorization', 'x_portal_token', 'email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_applicant_user_by_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `find_applicant_user_by_email`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `find_applicant_user_by_email`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `find_applicant_user_by_email`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `find_applicant_user_by_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_applicant_user_applications(self, x_tenant, authorization, x_portal_token, **kwargs):  # noqa: E501
        """Request the applications of a applicant user from a tenant.  # noqa: E501

        Request the applications of a applicant user from a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_applicant_user_applications(x_tenant, authorization, x_portal_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_applicant_user_applications_with_http_info(x_tenant, authorization, x_portal_token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_applicant_user_applications_with_http_info(x_tenant, authorization, x_portal_token, **kwargs)  # noqa: E501
            return data

    def get_applicant_user_applications_with_http_info(self, x_tenant, authorization, x_portal_token, **kwargs):  # noqa: E501
        """Request the applications of a applicant user from a tenant.  # noqa: E501

        Request the applications of a applicant user from a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_applicant_user_applications_with_http_info(x_tenant, authorization, x_portal_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param bool x_portal: Flag to determine that we are using web portal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'authorization', 'x_portal_token', 'x_portal']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applicant_user_applications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `get_applicant_user_applications`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_applicant_user_applications`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `get_applicant_user_applications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'x_portal' in params:
            header_params['x-portal'] = params['x_portal']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getapplicantuser(self, x_tenant, authorization, x_portal_token, id, **kwargs):  # noqa: E501
        """Return a specific applicant user instance.  # noqa: E501

        Return a specific applicant user instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantuser(x_tenant, authorization, x_portal_token, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str id: The ID of the applicant users that will be retrieved. (required)
        :return: ApplicantUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.getapplicantuser_with_http_info(x_tenant, authorization, x_portal_token, id, **kwargs)  # noqa: E501
        else:
            (data) = self.getapplicantuser_with_http_info(x_tenant, authorization, x_portal_token, id, **kwargs)  # noqa: E501
            return data

    def getapplicantuser_with_http_info(self, x_tenant, authorization, x_portal_token, id, **kwargs):  # noqa: E501
        """Return a specific applicant user instance.  # noqa: E501

        Return a specific applicant user instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.getapplicantuser_with_http_info(x_tenant, authorization, x_portal_token, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str authorization: Basic Authentication (not required if x-portal-token is send). (required)
        :param str x_portal_token: Login Token/Magic Link token (not required if Authorization is send). (required)
        :param str id: The ID of the applicant users that will be retrieved. (required)
        :return: ApplicantUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'authorization', 'x_portal_token', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplicantuser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `getapplicantuser`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `getapplicantuser`")  # noqa: E501
        # verify the required parameter 'x_portal_token' is set
        if ('x_portal_token' not in params or
                params['x_portal_token'] is None):
            raise ValueError("Missing the required parameter `x_portal_token` when calling `getapplicantuser`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `getapplicantuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_portal_token' in params:
            header_params['x-portal-token'] = params['x_portal_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/{applicantUserId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def new_applicant_user(self, x_tenant, body, jobsite, **kwargs):  # noqa: E501
        """Create a new applicant user  # noqa: E501

        Create a new applicant user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.new_applicant_user(x_tenant, body, jobsite, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param ApplicantUser body: Data used to create a new applicant user (required)
        :param  jobsite: The ID of the jobsite to create applicant. (required)
        :param  position: The ID of the position to register applicant (not required for talent base).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.new_applicant_user_with_http_info(x_tenant, body, jobsite, **kwargs)  # noqa: E501
        else:
            (data) = self.new_applicant_user_with_http_info(x_tenant, body, jobsite, **kwargs)  # noqa: E501
            return data

    def new_applicant_user_with_http_info(self, x_tenant, body, jobsite, **kwargs):  # noqa: E501
        """Create a new applicant user  # noqa: E501

        Create a new applicant user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.new_applicant_user_with_http_info(x_tenant, body, jobsite, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param ApplicantUser body: Data used to create a new applicant user (required)
        :param  jobsite: The ID of the jobsite to create applicant. (required)
        :param  position: The ID of the position to register applicant (not required for talent base).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'body', 'jobsite', 'position']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method new_applicant_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `new_applicant_user`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `new_applicant_user`")  # noqa: E501
        # verify the required parameter 'jobsite' is set
        if ('jobsite' not in params or
                params['jobsite'] is None):
            raise ValueError("Missing the required parameter `jobsite` when calling `new_applicant_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'position' in params:
            body_params = params['position']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reject_applicantion_position(self, applicant, position, **kwargs):  # noqa: E501
        """Reject applied position for internal jobsite an determinated applicant.  # noqa: E501

        Reject applied position for internal jobsite an determinated applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reject_applicantion_position(applicant, position, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant: The applicant id. (required)
        :param str position: The position id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reject_applicantion_position_with_http_info(applicant, position, **kwargs)  # noqa: E501
        else:
            (data) = self.reject_applicantion_position_with_http_info(applicant, position, **kwargs)  # noqa: E501
            return data

    def reject_applicantion_position_with_http_info(self, applicant, position, **kwargs):  # noqa: E501
        """Reject applied position for internal jobsite an determinated applicant.  # noqa: E501

        Reject applied position for internal jobsite an determinated applicant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reject_applicantion_position_with_http_info(applicant, position, async=True)
        >>> result = thread.get()

        :param async bool
        :param str applicant: The applicant id. (required)
        :param str position: The position id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicant', 'position']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reject_applicantion_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicant' is set
        if ('applicant' not in params or
                params['applicant'] is None):
            raise ValueError("Missing the required parameter `applicant` when calling `reject_applicantion_position`")  # noqa: E501
        # verify the required parameter 'position' is set
        if ('position' not in params or
                params['position'] is None):
            raise ValueError("Missing the required parameter `position` when calling `reject_applicantion_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicant' in params:
            path_params['applicant'] = params['applicant']  # noqa: E501
        if 'position' in params:
            path_params['position'] = params['position']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/:applicant/:position/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_email_verification(self, x_tenant, id, jobsite, **kwargs):  # noqa: E501
        """Resend the email verification for applicantUser  # noqa: E501

        Resend the email verification for applicantUser  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_email_verification(x_tenant, id, jobsite, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str id: The ID of the applicant users that will be resend email. (required)
        :param  jobsite: The ID of the jobsite. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resend_email_verification_with_http_info(x_tenant, id, jobsite, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_email_verification_with_http_info(x_tenant, id, jobsite, **kwargs)  # noqa: E501
            return data

    def resend_email_verification_with_http_info(self, x_tenant, id, jobsite, **kwargs):  # noqa: E501
        """Resend the email verification for applicantUser  # noqa: E501

        Resend the email verification for applicantUser  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_email_verification_with_http_info(x_tenant, id, jobsite, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_tenant: Tenant ID. (required)
        :param str id: The ID of the applicant users that will be resend email. (required)
        :param  jobsite: The ID of the jobsite. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_tenant', 'id', 'jobsite']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_email_verification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_tenant' is set
        if ('x_tenant' not in params or
                params['x_tenant'] is None):
            raise ValueError("Missing the required parameter `x_tenant` when calling `resend_email_verification`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resend_email_verification`")  # noqa: E501
        # verify the required parameter 'jobsite' is set
        if ('jobsite' not in params or
                params['jobsite'] is None):
            raise ValueError("Missing the required parameter `jobsite` when calling `resend_email_verification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_tenant' in params:
            header_params['x-tenant'] = params['x_tenant']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'jobsite' in params:
            body_params = params['jobsite']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/{applicantUser}/resend-email-verification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_partial(self, name, email, password, **kwargs):  # noqa: E501
        """Save the minimum data of ApplicantUser case his not exist in database  # noqa: E501

        Save the minimum data of ApplicantUser case his not exist in database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.save_partial(name, email, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param  name: The applicantUser name (required)
        :param  email: The applicantUser email (required)
        :param  password: The applicantUser password (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.save_partial_with_http_info(name, email, password, **kwargs)  # noqa: E501
        else:
            (data) = self.save_partial_with_http_info(name, email, password, **kwargs)  # noqa: E501
            return data

    def save_partial_with_http_info(self, name, email, password, **kwargs):  # noqa: E501
        """Save the minimum data of ApplicantUser case his not exist in database  # noqa: E501

        Save the minimum data of ApplicantUser case his not exist in database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.save_partial_with_http_info(name, email, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param  name: The applicantUser name (required)
        :param  email: The applicantUser email (required)
        :param  password: The applicantUser password (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'email', 'password']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_partial" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `save_partial`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `save_partial`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `save_partial`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password' in params:
            body_params = params['password']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applicant-user/save-partial', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
